@page "/addData"
@using Domain.Models
@using System.Text.Json
@inject HttpClient httpClient
@attribute [Authorize("MustBeTeacher")]

@page "/editEdata"
@using WebAPI.Models

<PageTitle>Add / Edit data</PageTitle>

<h3>Edit Energy Consumption</h3>

@if (edataList == null)
{
    <p>Loading...</p>
}
else
{
    <table class="edata-table">
        <thead>
            <tr>
                <th>Data Indicator</th>
                <th>Unit</th>
                @foreach (var edata in edataList)
                {
                    <th>@edata.Year.Year <button @onclick="() => DeleteEdata(edata.Environmentid)">Delete</button></th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Total Energy Consumption</td>
                <td>@edataList.FirstOrDefault()?.Unit</td>
                @foreach (var edata in edataList)
                {
                    <td><input type="number" @bind="edata.TotalEnergy" /></td>
                }
            </tr>
            <tr>
                <td>Crude Fuel</td>
                <td>@edataList.FirstOrDefault()?.Unit</td>
                @foreach (var edata in edataList)
                {
                    <td><input type="number" @bind="edata.CrudeFuel" /></td>
                }
            </tr>
            <tr>
                <td>Gas Fuel</td>
                <td>@edataList.FirstOrDefault()?.Unit</td>
                @foreach (var edata in edataList)
                {
                    <td><input type="number" @bind="edata.GasFuel" /></td>
                }
            </tr>
            <tr>
                <td>Purchased Electricity</td>
                <td>@edataList.FirstOrDefault()?.Unit</td>
                @foreach (var edata in edataList)
                {
                    <td><input type="number" @bind="edata.PurchElec" /></td>
                }
            </tr>
            <tr>
                <td>Renewable Energy</td>
                <td>@edataList.FirstOrDefault()?.Unit</td>
                @foreach (var edata in edataList)
                {
                    <td><input type="number" @bind="edata.RenewEnergy" /></td>
                }
            </tr>
            <tr>
                <td>Fossil Energy</td>
                <td>@edataList.FirstOrDefault()?.Unit</td>
                @foreach (var edata in edataList)
                {
                    <td><input type="number" @bind="edata.FossilEnergy" /></td>
                }
            </tr>
        </tbody>
    </table>
    <button class="apply-button" @onclick="ApplyEdataChanges">Apply</button>
}

<h3>Add New Energy Consumption Data</h3>

<div class="add-data-form">
    <div>
        <label>Year:</label>
        <input type="number" @bind="newYear" />
    </div>
    <div>
        <label>Total Energy:</label>
        <input type="number" @bind="newEdata.TotalEnergy" />
    </div>
    <div>
        <label>Crude Fuel:</label>
        <input type="number" @bind="newEdata.CrudeFuel" />
    </div>
    <div>
        <label>Gas Fuel:</label>
        <input type="number" @bind="newEdata.GasFuel" />
    </div>
    <div>
        <label>Purchased Electricity:</label>
        <input type="number" @bind="newEdata.PurchElec" />
    </div>
    <div>
        <label>Renewable Energy:</label>
        <input type="number" @bind="newEdata.RenewEnergy" />
    </div>
    <div>
        <label>Fossil Energy:</label>
        <input type="number" @bind="newEdata.FossilEnergy" />
    </div>
    <button class="add-button" @onclick="AddEdata">Add Data</button>
</div>

<h3>Edit Greenhouse Gas (GHG) Emissions</h3>

@if (greenHouseList == null)
{
    <p>Loading...</p>
}
else
{
    <table class="edata-table">
        <thead>
            <tr>
                <th>Data Indicator</th>
                <th>Unit</th>
                @foreach (var greenhouse in greenHouseList)
                {
                    <th>@greenhouse.Year.Year</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Total scope 1 and 2 - market-based</td>
                <td>@greenHouseList.FirstOrDefault()?.Unit</td>
                @foreach (var greenhouse in greenHouseList)
                {
                    <td><input type="number" @bind="greenhouse.scope12Market" /></td>
                }
            </tr>
            <tr>
                <td>Total scope 1 and 2 - location-based</td>
                <td>@greenHouseList.FirstOrDefault()?.Unit</td>
                @foreach (var greenhouse in greenHouseList)
                {
                    <td><input type="number" @bind="greenhouse.scope12location" /></td>
                }
            </tr>
            <tr>
                <td>Scope 3 - use of sold products</td>
                <td>@greenHouseList.FirstOrDefault()?.Unit</td>
                @foreach (var greenhouse in greenHouseList)
                {
                    <td><input type="number" @bind="greenhouse.scope3soldproducts" /></td>
                }
            </tr>
        </tbody>
    </table>
    <button class="apply-button" @onclick="ApplyGreenHouseChanges">Apply</button>
}

<h3>Edit Water Data</h3>

@if (waterList == null)
{
    <p>Loading...</p>
}
else
{
    <table class="edata-table">
        <thead>
            <tr>
                <th>Data Indicator</th>
                <th>Unit</th>
                @foreach (var water in waterList)
                {
                    <th>@water.Year.Year</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Water Consumption</td>
                <td>@waterList.FirstOrDefault()?.Unit</td>
                @foreach (var water in waterList)
                {
                    <td><input type="number" @bind="water.WaterConsumption" /></td>
                }
            </tr>
            <tr>
                <td>Water Recycled</td>
                <td>@waterList.FirstOrDefault()?.Unit</td>
                @foreach (var water in waterList)
                {
                    <td><input type="number" @bind="water.WaterRecycled" /></td>
                }
            </tr>
        </tbody>
    </table>
    <button class="apply-button" @onclick="ApplyWaterChanges">Apply</button>
}

<h3>Edit Waste Data</h3>

@if (wasteList == null)
{
    <p>Loading...</p>
}
else
{
    <table class="edata-table">
        <thead>
            <tr>
                <th>Data Indicator</th>
                <th>Unit</th>
                @foreach (var waste in wasteList)
                {
                    <th>@waste.Year.Year</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Total Waste</td>
                <td>@wasteList.FirstOrDefault()?.Unit</td>
                @foreach (var waste in wasteList)
                {
                    <td><input type="number" @bind="waste.TotalWaste" /></td>
                }
            </tr>
        </tbody>
    </table>
    <button class="apply-button" @onclick="ApplyWasteChanges">Apply</button>
}

@code {
    Data newData = new() { DueDate = DateTime.Now };
    List<Data> datas = new();
    string infoMessage = "";
    List<Edata> edataList = new();
    List<GreenHouse> greenHouseList = new();
    List<Water> waterList = new();
    List<Waste> wasteList = new();

    int newYear;
    Edata newEdata = new Edata();

    protected async override Task OnInitializedAsync()
    {
        await FetchDatasAsync();
        await FetchEdataAsync();
        await FetchGreenHouseAsync();
        await FetchWaterAsync();
        await FetchWasteAsync();
    }

    async Task AddData()
    {
        var response = await httpClient.PostAsJsonAsync("api/datas", newData);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchDatasAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddEdata()
    {
        newEdata.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/edata", newEdata);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchEdataAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task UpdateData(Data data)
    {
        await httpClient.PutAsJsonAsync($"api/datas/{data.Id}", data);
        await FetchDatasAsync();
    }

    async Task FetchDatasAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/datas");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            datas = JsonSerializer.Deserialize<List<Data>>(response, options) ?? new();
        }
        catch
        {
            
        }
    }

    async Task RemoveDataAsync(int id)
    {
        await httpClient.DeleteAsync($"api/datas?id={id}");
        await FetchDatasAsync();
    }

    async Task FetchEdataAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/edata");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            edataList = JsonSerializer.Deserialize<List<Edata>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Edata: {ex.Message}");
        }
    }

    async Task FetchGreenHouseAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/greenhouse");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            greenHouseList = JsonSerializer.Deserialize<List<GreenHouse>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching GreenHouse data: {ex.Message}");
        }
    }

    async Task FetchWaterAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/water");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            waterList = JsonSerializer.Deserialize<List<Water>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Water data: {ex.Message}");
        }
    }

    async Task FetchWasteAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/waste");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            wasteList = JsonSerializer.Deserialize<List<Waste>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Waste data: {ex.Message}");
        }
    }

    async Task ApplyChanges()
    {
        foreach (var edata in edataList)
        {
            await httpClient.PutAsJsonAsync($"api/edata/{edata.Environmentid}", edata);
        }
        await FetchEdataAsync();
    }

    async Task ApplyEdataChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/edata", edataList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Edata changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Edata changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Edata changes: {ex.Message}");
        }
    }

    async Task ApplyGreenHouseChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/greenhouse", greenHouseList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("GreenHouse changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying GreenHouse changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying GreenHouse changes: {ex.Message}");
        }
    }

    async Task ApplyWaterChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/water", waterList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Water changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Water changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Water changes: {ex.Message}");
        }
    }

    async Task ApplyWasteChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/waste", wasteList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Waste changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Waste changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Waste changes: {ex.Message}");
        }
    }

    async Task DeleteEdata(int environmentId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/edata/{environmentId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchEdataAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }
}

<style>
    .edata-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-size: 16px;
        text-align: left;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .edata-table th,
    .edata-table td {
        border: 1px solid #ddd;
        padding: 12px;
    }

    .edata-table th {
        background-color: rgba(65, 75, 86);
        color: white;
        font-weight: bold;
    }

    .edata-table tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .edata-table tr:hover {
        background-color: #ddd;
    }

    .edata-table td {
        text-align: center;
    }

    .edata-table th:first-child,
    .edata-table td:first-child {
        text-align: left;
    }

    .add-data-form {
        margin-top: 20px;
        padding: 20px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .add-data-form div {
        margin-bottom: 10px;
    }

    .add-data-form label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .add-data-form input {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    .apply-button,
    .add-button {
        background-color: rgba(65, 75, 86);
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        font-size: 16px;
    }

    .apply-button:hover,
    .add-button:hover {
        background-color: rgba(65, 75, 86);
    }
</style>